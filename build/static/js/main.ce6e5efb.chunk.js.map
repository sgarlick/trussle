{"version":3,"sources":["components/header.js","components/homepage.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","PureComponent","Homepage","props","state","input","Cookies","get","message","host","window","location","hostname","fetch","method","then","response","json","res","setState","decoded","e","target","value","this","match","decode","id","onChange","numInput","placeholder","cookies","set","path","JSON","stringify","Component","App","exact","isLocalhost","Boolean","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ce6e5efb.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport './header.css';\n\nexport class Header extends PureComponent {\n    render() {\n\t\treturn (\n              <div className=\"headerContents\">\n                <div className=\"headerMain\">Trussle</div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Header } from './header';\nimport './homepage.css';\nimport Cookies from 'universal-cookie';\n\nexport class Homepage extends Component {\n    constructor(props) {\n        super(props);\n\t\tthis.state = { \n\t\t\tinput: new Cookies().get('input'),\n\t\t\tmessage: new Cookies().get('message')\n\t\t};\t\t\t\n\t}\n\n\t// set cookies on any state change\n\tstatic getDerivedStateFromProps(props,state){\n\t\tconst cookies = new Cookies();\n\t\tcookies.set('input', state.input, { path: '/' });\n\t\tcookies.set('message', JSON.stringify(state.message), { path: '/' });\t\t\n\t\treturn state\n\t}\n\n\t// Decode Function run onChange of Input calling Express server running on Port 3001\n\tdecode(input){\n\t\tconst host = window.location.hostname;\n\t\t//console.log(host);\n\t\tconst url = \"http://\"+ host +\":3001/trussle/server/?message=\"+input\n\t\t\tfetch(url, {method: 'GET'})\n\t\t\t.then(response => {\n\t\t\tresponse.json().then(\t\t\t\n\t\t\t\tres => this.setState({message:res.decoded})\n\t\t\t);\n\t\t});\n\t}\n\n\tnumInput(e){\n\t\tconst input = e.target.value;\n\t\tthis.setState({input:input});\n\t\t// Only decode numbers and spaces\n\t\tif (input.match(/^[0-9\\s]+$/) != null){\n\t\t\t// call to decode message function \n\t\t\tconst message = this.decode(input);\n\t\t\tthis.setState({message:message});\n\t\t}\n\t\telse{this.setState({message:\"Only Numeric Numbers allowed!\"});}\n\t\t\n\t}\n\t// Render Page\n\trender() {\n\t\tconst input = this.state.input===\"undefined\"?'':this.state.input;\n\t\tconst message = this.state.message===\"undefined\"?'':this.state.message;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div id=\"header\">\n\t\t\t\t\t<Header/>\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div id=\"body\">\n\t\t\t\t\t<div className=\"headMain\">Numericode Decoder</div>\n\t\t\t\t\t<div className=\"decoder\">\n\t\t\t\t\t\t<p>Numeric Code:</p>\n\t\t\t\t\t\t<div className=\"inputBox\"><input id=\"numInput\" onChange={(e)=>this.numInput(e)} placeholder=\"Enter your Numeric Code\" value={input}></input></div>\n\t\t\t\t\t\t<div className=\"secretMessage\">\n\t\t\t\t\t\t\t<div>Secret Message</div>\n\t\t\t\t\t\t\t<div id=\"messageResponse\">{message}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n  \t\t);\n\t}\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router,Switch,Route} from \"react-router-dom\";\nimport { Homepage } from './components/homepage';\n\n\nfunction App() {\n\t\n\treturn (\n\t<Router>\n\t\t<Switch>\n    <Route exact path=\"/\">\n\t\t  \t\t  <Homepage path={null}/>\n          </Route>\n          <Route exact path=\"/trussle\">\n\t\t  \t\t  <Homepage path={null}/>\n          </Route>\n        </Switch>\n    </Router>\n\t\t\t\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11'; \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}