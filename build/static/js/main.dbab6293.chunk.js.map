{"version":3,"sources":["components/header.js","components/homepage.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","PureComponent","Homepage","props","state","input","Cookies","get","message","host","window","location","hostname","url","fetch","res","status","Error","json","then","setState","decoded","join","console","error","e","target","value","this","match","response","split","map","numgroup","num","parseInt","Number","isInteger","String","fromCharCode","id","onChange","numInput","placeholder","cookies","set","path","Component","App","isLocalhost","Boolean","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dbab6293.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport './header.css';\n\nexport class Header extends PureComponent {\n    render() {\n\t\treturn (\n              <div className=\"headerContents\">\n                <div className=\"headerMain\">Trussle</div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { Header } from './header';\nimport './homepage.css';\nimport Cookies from 'universal-cookie';\n\nexport class Homepage extends Component {\n    constructor(props) {\n        super(props);\n\t\tthis.state = { \n\t\t\tinput: new Cookies().get('input'),\n\t\t\tmessage: new Cookies().get('message')\n\t\t};\t\t\t\n\t}\n\n\t// set cookies on any state change\n\tstatic getDerivedStateFromProps(props,state){\n\t\tconst cookies = new Cookies();\n\t\tcookies.set('input', state.input, { path: '/' });\n\t\tcookies.set('message', state.message, { path: '/' });\t\t\n\t\treturn state\n\t}\n\n\t// Decode Function run onChange of Input calling Express server running on Port 3001\n\tasync decode(input){\n\t\tconst host = window.location.hostname;\n\t\tconst url = \"http://\"+ host +\":3001/trussle/server/?message=\"+input\n\t\ttry {\n\t\t\tconst res = await fetch(url);\n\t\t\tif (res.status >= 400)\n\t\t\t   throw new Error(\"something went wrong\")\n\t\t\t  await res.json().then(\t\t\t  \t\t\n\t\t\t\t \t\tres => this.setState({message:res.decoded.join(\"\")})\n\t\t\t\t \t);\n\t\t } catch (err) {\n\t\t   console.error(err);\n\t\t }\n\t}\n\n\tnumInput(e){\n\t\tconst input = e.target.value;\n\t\tthis.setState({input:input});\n\t\t// Only decode numbers and spaces\n\t\tif (input.match(/^[0-9\\s]+$/) != null){\n\t\t\t// call to decode message function \n\t\t\t//this.decode(input);\n\t\t\t//const message = this.message;\n\t\t\tvar numberArray = input.split(\" \");\n\t\t\t\t// message conversion using fromCharcode counting from 65\n\t\t\t\tlet response = numberArray.map((numgroup)=>{\n\t\t\t\t\t\tlet num = parseInt(numgroup);\n\t\t\t\t// Loop around a divide by 27 loop until the number is less than 27\n\t\t\t\twhile(num>=27){num = num/27;} \n\t\t\t\t\t\tif (Number.isInteger(num)){return String.fromCharCode(num+64);}\n\t\t\t\t//return space for numbers not divisable by 27\n\t\t\t\telse return ' ';\n\t\t\t\t\t}); \n\t\t\t\t\tthis.setState({message:response});\n\t\t}\n\t\telse{this.setState({message:\"Only Numeric Numbers allowed!\"});}\n\t}\n\t\n\t// Render Page\n\trender() {\n\t\tconst input = this.state.input===\"undefined\"?'':this.state.input;\n\t\tconst message = this.state.message===\"undefined\"?'':this.state.message;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div id=\"header\">\n\t\t\t\t\t<Header/>\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div id=\"body\">\n\t\t\t\t\t<div className=\"headMain\">Numericode Decoder</div>\n\t\t\t\t\t<div className=\"decoder\">\n\t\t\t\t\t\t<p>Numeric Code:</p>\n\t\t\t\t\t\t<div className=\"inputBox\"><input id=\"numInput\" onChange={(e)=>this.numInput(e)} placeholder=\"Enter your Numeric Code\" value={input}></input></div>\n\t\t\t\t\t\t<div className=\"secretMessage\">\n\t\t\t\t\t\t\t<div>Secret Message</div>\n\t\t\t\t\t\t\t<div id=\"messageResponse\">{message}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n  \t\t);\n\t}\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router,Switch,Route} from \"react-router-dom\";\nimport { Homepage } from './components/homepage';\n\n\nfunction App() {\n\t\n\treturn (\n\t<Router>\n\t\t<Switch>\n      <Route path=\"/\">\n\t\t  \t<Homepage path={null}/>\n      </Route>\n      <Route path=\"/trussle\">\n\t\t    <Homepage path={null}/>\n      </Route>\n    </Switch>\n  </Router>\t\t\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11'; \nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}